rosbuild_find_ros_package(roscpp)

set(genmsg_cpp_exe ${CMAKE_SOURCE_DIR}/ros/core/roscpp/scripts/genmsg_cpp.py)
set(gensrv_cpp_exe ${CMAKE_SOURCE_DIR}/ros/core/roscpp/scripts/gensrv_cpp.py)

# Message-generation support.
macro(genmsg_cpp)

  set(_autogen "")

  foreach(_msg ${ARGN})
    # Construct the path to the .msg file
    set(_input ${PROJECT_SOURCE_DIR}/${_msg})
  
    # rosbuild_gendeps(${PROJECT_NAME} ${_msg})
  
    string(REPLACE ".msg" ".h" _output_cpp_base ${_msg})
    set(_outdir ${ROSBUILD_GEN_DIR}/cpp/msg)
    set(_output_cpp ${_outdir}/${PROJECT_NAME}/${_output_cpp_base})

    # Add the rule to build the .h the .msg
    add_custom_command(OUTPUT ${_output_cpp} 
      COMMAND ${ROSBUILD_SUBSHELL} 
      ${genmsg_cpp_exe} 
      ${_input}
      -o ${_outdir}
      DEPENDS ${_input} ${genmsg_cpp_exe} ${gendeps_exe} 
      ${${PROJECT_NAME}_${_msg}_GENDEPS} ${ROS_MANIFEST_LIST}
      )
		     
    list(APPEND _autogen ${_output_cpp})
    
  endforeach(_msg)

  if (_autogen)
    add_custom_target(${PROJECT_NAME}_roscpp_msggen ALL DEPENDS ${_autogen})
    add_dependencies(${PROJECT_NAME}_codegen ${PROJECT_NAME}_roscpp_msggen)
  endif()
endmacro(genmsg_cpp)

# Service-generation support.
macro(gensrv_cpp)
if (FALSE)
  rosbuild_get_srvs(_srvlist)
  set(_autogen "")
  foreach(_srv ${_srvlist})
    # Construct the path to the .srv file
    string(REPLACE ".srv" ".h" _output_cpp_base ${_srv})

    set(_input ${PROJECT_SOURCE_DIR}/srv/${_srv})
  
    rosbuild_gendeps(${PROJECT_NAME} ${_srv})
  
    set(_outdir ${ROSBUILD_GEN_DIR}/cpp/srv)
    set(_output_cpp ${_outdir}/${PROJECT_NAME}/${_output_cpp_base})

    # Add the rule to build the .h from the .srv
    add_custom_command(
      OUTPUT ${_output_cpp} 
      COMMAND 
      ${ROSBUILD_SUBSHELL} ${gensrv_cpp_exe} 
      --input=${_input}
      --outdir=${_outdir}
      DEPENDS ${_input} ${gensrv_cpp_exe} ${genmsg_cpp_exe} ${gendeps_exe} ${${PROJECT_NAME}_${_srv}_GENDEPS} ${ROS_MANIFEST_LIST}
      )

    list(APPEND _autogen ${_output_cpp})

  endforeach(_srv)
  # message("autogen=${_autogen}")
  # Create a target that depends on the union of all the autogenerated
  # files

  if (_autogen)
    add_custom_target(${PROJECT_NAME}_roscpp_srvgen ALL DEPENDS ${_autogen})
    add_dependencies(${PROJECT_NAME}_codegen ${PROJECT_NAME}_roscpp_srvgen)
  endif()
endif()
endmacro(gensrv_cpp)

